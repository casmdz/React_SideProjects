ShoppingCartContext.tsx: 

import { createContext, useContext, ReactNode, useState } from 'react';

type ShoppingCartProviderProps = {
children: ReactNode 
}

type CartItem = {
id: number
quantity: number
}

type ShoppingCartContext = {
openCart: () => void;
closeCart: () => void;
getItemQuantity: (id:number) => number;
increaseCartQuantity: (id:number) => void;
decreaseCartQuantity: (id:number) => void;
removeFromCart: (id:number) => void;
cartQuantity: number;
cartItems: CartItem[];
}

const ShoppingCartContext = createContext({} as ShoppingCartContext)

export function useShoppingCart() {
return useContext(ShoppingCartContext)
}

export function ShoppingCartProvider({ children }: ShoppingCartProviderProps) {
//place to store cart information
const [ cartItems, setCartItems ] = useState<CartItem[]>([])

//create a state variable for open / close cart 
const [ isOpen, setIsOpen ] = useState(false)

const cartQuantity = cartItems.reduce((quantity, item) => item.quantity + quantity, 0 ) //counting all the item quantitiies in our cart

const openCart = () => setIsOpen(true)
const closeCart = () => setIsOpen(false)

function getItemQuantity(id:number) {
    return cartItems.find(item => item.id === id)?.quantity || 0
}

 // ... (other code)

return (
<ShoppingCartContext.Provider 
value={{ getItemQuantity, increaseCartQuantity, decreaseCartQuantity, removeFromCart, cartItems, cartQuantity, openCart, closeCart }}>
    {children}
</ShoppingCartContext.Provider>
)}


-----------
Navbar.tsx: 

import * as React from "react";
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';

import { useShoppingCart } from "../context/ShoppingCartContext";

const pages = ["home", "about", "store"];



export function ResponsiveAppBar() {
const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);

const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {
setAnchorElNav(event.currentTarget);};

const handleCloseNavMenu = () => {
setAnchorElNav(null)};

// unsure whether to use 
// const { openCart, cartQuantity } = useShoppingCart()

return (
<AppBar position="static">
<Container maxWidth="xl">
<Toolbar disableGutters>
<AdbIcon sx={{ display: { xs: "none", md: "flex" }, mr: 1 }} />
<Typography
variant="h6"
noWrap
component="a"
href="#navbar"
sx={{
    mr: 1,
    display: { xs: "none", md: "flex" },
    fontWeight: 700,
    letterSpacing: ".3rem",
    color: "inherit",
    textDecoration: "none",
}}
>
Project!
</Typography>

<Box sx={{ flexGrow: 1, display: { xs: "flex", md: "none" } }}>
// ... (other code)

<Menu
    id="menu-appbar"
    anchorEl={anchorElNav}
    anchorOrigin={{
    vertical: "bottom",
    horizontal: "left",
    }}
    keepMounted
    transformOrigin={{
    vertical: "top",
    horizontal: "left",
    }}
    open={Boolean(anchorElNav)}
    onClose={handleCloseNavMenu}
    sx={{
    display: { xs: "block", md: "none" },
    }}
>
    {pages.map((page) => (
    <MenuItem key={page} onClick={handleCloseNavMenu}>
        <Typography textAlign="center">{page}</Typography>
    </MenuItem>
    ))}
</Menu>
</Box>

<AdbIcon sx={{ display: { xs: "flex", md: "none" }, mr: 1 }} />
<Typography
variant="h5"
noWrap
component="a"
href="#smaller-screen-nav"
sx={{
    mr: 2,
    display: { xs: "flex", md: "none" },
    flexGrow: 1,
    fontWeight: 700,
    letterSpacing: ".3rem",
    color: "inherit",
    textDecoration: "none",
}}
>
Project
</Typography>

// ... (other code)

<Box sx={{ flexGrow: 0 }}>
<div>
    <IconButton 
    aria-label="shopping cart" sx={{ color: "#fafafa" }}>
    <Badge color="error" badgeContent={1}>
        <Tooltip title="Your cart">
        <ShoppingCartIcon />
        </Tooltip>
    </Badge>
    </IconButton>

</div>
</Box>

</Toolbar>
</Container>
</AppBar>
);
}
